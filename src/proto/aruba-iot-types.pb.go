//  (C) Copyright [2018-2022] Hewlett Packard Enterprise Development LP
//  Note: File corresponds to AOS 8.10.x.x release

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: aruba-iot-types.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enumeration of device classes. These device classes
// can be used to filter devices and will be used to classify each device.
// An IOT device can be part of more than one class.
type DeviceClassEnum int32

const (
	DeviceClassEnum_unclassified         DeviceClassEnum = 0
	DeviceClassEnum_arubaBeacon          DeviceClassEnum = 1
	DeviceClassEnum_arubaTag             DeviceClassEnum = 2
	DeviceClassEnum_zfTag                DeviceClassEnum = 3
	DeviceClassEnum_stanleyTag           DeviceClassEnum = 4
	DeviceClassEnum_virginBeacon         DeviceClassEnum = 5
	DeviceClassEnum_enoceanSensor        DeviceClassEnum = 6
	DeviceClassEnum_enoceanSwitch        DeviceClassEnum = 7
	DeviceClassEnum_iBeacon              DeviceClassEnum = 8
	DeviceClassEnum_allBleData           DeviceClassEnum = 9
	DeviceClassEnum_RawBleData           DeviceClassEnum = 10
	DeviceClassEnum_eddystone            DeviceClassEnum = 11
	DeviceClassEnum_assaAbloy            DeviceClassEnum = 12
	DeviceClassEnum_arubaSensor          DeviceClassEnum = 13
	DeviceClassEnum_abbSensor            DeviceClassEnum = 14
	DeviceClassEnum_wifiTag              DeviceClassEnum = 15
	DeviceClassEnum_wifiAssocSta         DeviceClassEnum = 16
	DeviceClassEnum_wifiUnassocSta       DeviceClassEnum = 17
	DeviceClassEnum_mysphera             DeviceClassEnum = 18
	DeviceClassEnum_sBeacon              DeviceClassEnum = 19
	DeviceClassEnum_wiliot               DeviceClassEnum = 20
	DeviceClassEnum_ZSD                  DeviceClassEnum = 21
	DeviceClassEnum_serialdata           DeviceClassEnum = 22
	DeviceClassEnum_exposureNotification DeviceClassEnum = 23
	DeviceClassEnum_onity                DeviceClassEnum = 24
	DeviceClassEnum_minew                DeviceClassEnum = 25
	DeviceClassEnum_google               DeviceClassEnum = 26
	DeviceClassEnum_polestar             DeviceClassEnum = 27
	DeviceClassEnum_blyott               DeviceClassEnum = 28
	DeviceClassEnum_diract               DeviceClassEnum = 29
	DeviceClassEnum_gwahygiene           DeviceClassEnum = 30
	DeviceClassEnum_noneBleData          DeviceClassEnum = 31
)

// Enum value maps for DeviceClassEnum.
var (
	DeviceClassEnum_name = map[int32]string{
		0:  "unclassified",
		1:  "arubaBeacon",
		2:  "arubaTag",
		3:  "zfTag",
		4:  "stanleyTag",
		5:  "virginBeacon",
		6:  "enoceanSensor",
		7:  "enoceanSwitch",
		8:  "iBeacon",
		9:  "allBleData",
		10: "RawBleData",
		11: "eddystone",
		12: "assaAbloy",
		13: "arubaSensor",
		14: "abbSensor",
		15: "wifiTag",
		16: "wifiAssocSta",
		17: "wifiUnassocSta",
		18: "mysphera",
		19: "sBeacon",
		20: "wiliot",
		21: "ZSD",
		22: "serialdata",
		23: "exposureNotification",
		24: "onity",
		25: "minew",
		26: "google",
		27: "polestar",
		28: "blyott",
		29: "diract",
		30: "gwahygiene",
		31: "noneBleData",
	}
	DeviceClassEnum_value = map[string]int32{
		"unclassified":         0,
		"arubaBeacon":          1,
		"arubaTag":             2,
		"zfTag":                3,
		"stanleyTag":           4,
		"virginBeacon":         5,
		"enoceanSensor":        6,
		"enoceanSwitch":        7,
		"iBeacon":              8,
		"allBleData":           9,
		"RawBleData":           10,
		"eddystone":            11,
		"assaAbloy":            12,
		"arubaSensor":          13,
		"abbSensor":            14,
		"wifiTag":              15,
		"wifiAssocSta":         16,
		"wifiUnassocSta":       17,
		"mysphera":             18,
		"sBeacon":              19,
		"wiliot":               20,
		"ZSD":                  21,
		"serialdata":           22,
		"exposureNotification": 23,
		"onity":                24,
		"minew":                25,
		"google":               26,
		"polestar":             27,
		"blyott":               28,
		"diract":               29,
		"gwahygiene":           30,
		"noneBleData":          31,
	}
)

func (x DeviceClassEnum) Enum() *DeviceClassEnum {
	p := new(DeviceClassEnum)
	*p = x
	return p
}

func (x DeviceClassEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceClassEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_types_proto_enumTypes[0].Descriptor()
}

func (DeviceClassEnum) Type() protoreflect.EnumType {
	return &file_aruba_iot_types_proto_enumTypes[0]
}

func (x DeviceClassEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceClassEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceClassEnum(num)
	return nil
}

// Deprecated: Use DeviceClassEnum.Descriptor instead.
func (DeviceClassEnum) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{0}
}

// Actions used in the southbound API.
type ActionType int32

const (
	// Connect to a BLE device
	ActionType_bleConnect ActionType = 0
	// Disconnect from a BLE device
	// The device must already be connnected for this action to succeed
	ActionType_bleDisconnect ActionType = 1
	// Read from GATT characteristic. The value will be returned using the 'characteristics' topic.
	// The action result will be returned in the 'results' topic
	// The device must already be connnected for this action to succeed
	ActionType_gattRead ActionType = 2
	// Write to GATT characteristic.
	// The action result will be returned in the 'results' topic
	// The device must already be connnected for this action to succeed
	ActionType_gattWrite             ActionType = 3
	ActionType_gattWriteWithResponse ActionType = 4
	// Enable/Disable GATT notifications on a characteristic.
	// Notifications will result in updated values via the 'characteristcs' topic.
	// The device must already be connnected for this action to succeed
	ActionType_gattNotification ActionType = 5
	// Enable/Disable GATT indications on a characteristic.
	// Indications will result in updated values via the 'characteristics' topic.
	// The device must already be connnected for this action to succeed
	ActionType_gattIndication ActionType = 6
	// Authenticate peer BLE device, which is an optional action.
	// This action can only be used during connection
	ActionType_bleAuthenticate ActionType = 7
	// Encrypt link with the key received from last successful authentication.
	// Also, this action can only be used during connection
	ActionType_bleEncrypt ActionType = 8
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "bleConnect",
		1: "bleDisconnect",
		2: "gattRead",
		3: "gattWrite",
		4: "gattWriteWithResponse",
		5: "gattNotification",
		6: "gattIndication",
		7: "bleAuthenticate",
		8: "bleEncrypt",
	}
	ActionType_value = map[string]int32{
		"bleConnect":            0,
		"bleDisconnect":         1,
		"gattRead":              2,
		"gattWrite":             3,
		"gattWriteWithResponse": 4,
		"gattNotification":      5,
		"gattIndication":        6,
		"bleAuthenticate":       7,
		"bleEncrypt":            8,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_types_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_aruba_iot_types_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionType(num)
	return nil
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{1}
}

// The topic helps in identifying the message type
// NbTopic specifies the topic for Northbound messages
type NbTopic int32

const (
	NbTopic_telemetry       NbTopic = 0
	NbTopic_actionResults   NbTopic = 1
	NbTopic_characteristics NbTopic = 2
	NbTopic_bleData         NbTopic = 3
	NbTopic_wifiData        NbTopic = 4
	NbTopic_deviceCount     NbTopic = 5
	NbTopic_status          NbTopic = 6
	NbTopic_zbNbData        NbTopic = 7
	NbTopic_serialDataNb    NbTopic = 8
	NbTopic_apHealthUpdate  NbTopic = 9
)

// Enum value maps for NbTopic.
var (
	NbTopic_name = map[int32]string{
		0: "telemetry",
		1: "actionResults",
		2: "characteristics",
		3: "bleData",
		4: "wifiData",
		5: "deviceCount",
		6: "status",
		7: "zbNbData",
		8: "serialDataNb",
		9: "apHealthUpdate",
	}
	NbTopic_value = map[string]int32{
		"telemetry":       0,
		"actionResults":   1,
		"characteristics": 2,
		"bleData":         3,
		"wifiData":        4,
		"deviceCount":     5,
		"status":          6,
		"zbNbData":        7,
		"serialDataNb":    8,
		"apHealthUpdate":  9,
	}
)

func (x NbTopic) Enum() *NbTopic {
	p := new(NbTopic)
	*p = x
	return p
}

func (x NbTopic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NbTopic) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_types_proto_enumTypes[2].Descriptor()
}

func (NbTopic) Type() protoreflect.EnumType {
	return &file_aruba_iot_types_proto_enumTypes[2]
}

func (x NbTopic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NbTopic) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NbTopic(num)
	return nil
}

// Deprecated: Use NbTopic.Descriptor instead.
func (NbTopic) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{2}
}

// The topic helps in identifying the message type
// SbTopic specifies the topic for Southbound messages
type SbTopic int32

const (
	SbTopic_actions      SbTopic = 0
	SbTopic_config       SbTopic = 1
	SbTopic_sbStatus     SbTopic = 2
	SbTopic_zbSbData     SbTopic = 3
	SbTopic_serialDataSb SbTopic = 4
)

// Enum value maps for SbTopic.
var (
	SbTopic_name = map[int32]string{
		0: "actions",
		1: "config",
		2: "sbStatus",
		3: "zbSbData",
		4: "serialDataSb",
	}
	SbTopic_value = map[string]int32{
		"actions":      0,
		"config":       1,
		"sbStatus":     2,
		"zbSbData":     3,
		"serialDataSb": 4,
	}
)

func (x SbTopic) Enum() *SbTopic {
	p := new(SbTopic)
	*p = x
	return p
}

func (x SbTopic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SbTopic) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_types_proto_enumTypes[3].Descriptor()
}

func (SbTopic) Type() protoreflect.EnumType {
	return &file_aruba_iot_types_proto_enumTypes[3]
}

func (x SbTopic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SbTopic) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SbTopic(num)
	return nil
}

// Deprecated: Use SbTopic.Descriptor instead.
func (SbTopic) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{3}
}

// The topic includes the bonding key generated after sucessful pairing and bonding.
// Bonding happens only when both sides enable bonding
type BleBondingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encryption key which is generated when bonding is enabled for pairing
	Key []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (x *BleBondingKey) Reset() {
	*x = BleBondingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BleBondingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BleBondingKey) ProtoMessage() {}

func (x *BleBondingKey) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BleBondingKey.ProtoReflect.Descriptor instead.
func (*BleBondingKey) Descriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{0}
}

func (x *BleBondingKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// Mandatory header for every frame
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only version 1 is supported for now
	Version *uint64 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	// Access Token is provided in all NB frames. The server is expected to validate the
	// token and report an error if the token is not valid
	AccessToken *string `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	// For Northbound frames, the topic indicates the type of payload.
	// Only one topic can be present per message
	NbTopic *NbTopic `protobuf:"varint,3,opt,name=nbTopic,enum=aruba_telemetry.NbTopic" json:"nbTopic,omitempty"`
	// For SouthBound frames, the topic indicates the type of payload.
	// Only one topic can be present per message
	SbTopic *SbTopic `protobuf:"varint,4,opt,name=sbTopic,enum=aruba_telemetry.SbTopic" json:"sbTopic,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_aruba_iot_types_proto_rawDescGZIP(), []int{1}
}

func (x *Meta) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Meta) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *Meta) GetNbTopic() NbTopic {
	if x != nil && x.NbTopic != nil {
		return *x.NbTopic
	}
	return NbTopic_telemetry
}

func (x *Meta) GetSbTopic() SbTopic {
	if x != nil && x.SbTopic != nil {
		return *x.SbTopic
	}
	return SbTopic_actions
}

var File_aruba_iot_types_proto protoreflect.FileDescriptor

var file_aruba_iot_types_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x21, 0x0a, 0x0d, 0x42, 0x6c, 0x65, 0x42,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x04,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x32, 0x0a, 0x07, 0x6e, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x07, 0x6e, 0x62,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x07, 0x73, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2a, 0xf6, 0x03, 0x0a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x0c, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x61, 0x72, 0x75, 0x62, 0x61, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x61, 0x72, 0x75, 0x62, 0x61, 0x54, 0x61, 0x67, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x7a, 0x66, 0x54, 0x61, 0x67, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x6e, 0x6c, 0x65, 0x79, 0x54, 0x61, 0x67, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x76, 0x69, 0x72,
	0x67, 0x69, 0x6e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x65,
	0x6e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x65, 0x6e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x09, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x65, 0x64, 0x64, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x61, 0x41, 0x62, 0x6c, 0x6f, 0x79, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0d, 0x12, 0x0d, 0x0a,
	0x09, 0x61, 0x62, 0x62, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07,
	0x77, 0x69, 0x66, 0x69, 0x54, 0x61, 0x67, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x77, 0x69, 0x66,
	0x69, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x77,
	0x69, 0x66, 0x69, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x10, 0x11, 0x12,
	0x0c, 0x0a, 0x08, 0x6d, 0x79, 0x73, 0x70, 0x68, 0x65, 0x72, 0x61, 0x10, 0x12, 0x12, 0x0b, 0x0a,
	0x07, 0x73, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x77, 0x69,
	0x6c, 0x69, 0x6f, 0x74, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x53, 0x44, 0x10, 0x15, 0x12,
	0x0e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x10, 0x16, 0x12,
	0x18, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x6e, 0x69,
	0x74, 0x79, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x77, 0x10, 0x19, 0x12,
	0x0a, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x70,
	0x6f, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x72, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x6c, 0x79,
	0x6f, 0x74, 0x74, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x61, 0x63, 0x74, 0x10,
	0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x77, 0x61, 0x68, 0x79, 0x67, 0x69, 0x65, 0x6e, 0x65, 0x10,
	0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x1f, 0x2a, 0xb6, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x67, 0x61, 0x74, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x10, 0x08, 0x2a, 0xac, 0x01, 0x0a, 0x07,
	0x4e, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x77,
	0x69, 0x66, 0x69, 0x44, 0x61, 0x74, 0x61, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x7a, 0x62, 0x4e, 0x62, 0x44, 0x61,
	0x74, 0x61, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x62, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x70, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x09, 0x2a, 0x50, 0x0a, 0x07, 0x53, 0x62,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x73, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x7a, 0x62, 0x53, 0x62, 0x44, 0x61, 0x74, 0x61, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x62, 0x10, 0x04, 0x42, 0x1b, 0x5a, 0x19,
	0x6c, 0x75, 0x62, 0x64, 0x75, 0x62, 0x2e, 0x6e, 0x6c, 0x2f, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d,
	0x69, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_aruba_iot_types_proto_rawDescOnce sync.Once
	file_aruba_iot_types_proto_rawDescData = file_aruba_iot_types_proto_rawDesc
)

func file_aruba_iot_types_proto_rawDescGZIP() []byte {
	file_aruba_iot_types_proto_rawDescOnce.Do(func() {
		file_aruba_iot_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruba_iot_types_proto_rawDescData)
	})
	return file_aruba_iot_types_proto_rawDescData
}

var file_aruba_iot_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_aruba_iot_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aruba_iot_types_proto_goTypes = []any{
	(DeviceClassEnum)(0),  // 0: aruba_telemetry.deviceClassEnum
	(ActionType)(0),       // 1: aruba_telemetry.ActionType
	(NbTopic)(0),          // 2: aruba_telemetry.NbTopic
	(SbTopic)(0),          // 3: aruba_telemetry.SbTopic
	(*BleBondingKey)(nil), // 4: aruba_telemetry.BleBondingKey
	(*Meta)(nil),          // 5: aruba_telemetry.Meta
}
var file_aruba_iot_types_proto_depIdxs = []int32{
	2, // 0: aruba_telemetry.Meta.nbTopic:type_name -> aruba_telemetry.NbTopic
	3, // 1: aruba_telemetry.Meta.sbTopic:type_name -> aruba_telemetry.SbTopic
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_aruba_iot_types_proto_init() }
func file_aruba_iot_types_proto_init() {
	if File_aruba_iot_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aruba_iot_types_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BleBondingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_types_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruba_iot_types_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aruba_iot_types_proto_goTypes,
		DependencyIndexes: file_aruba_iot_types_proto_depIdxs,
		EnumInfos:         file_aruba_iot_types_proto_enumTypes,
		MessageInfos:      file_aruba_iot_types_proto_msgTypes,
	}.Build()
	File_aruba_iot_types_proto = out.File
	file_aruba_iot_types_proto_rawDesc = nil
	file_aruba_iot_types_proto_goTypes = nil
	file_aruba_iot_types_proto_depIdxs = nil
}

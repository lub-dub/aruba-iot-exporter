//  (C) Copyright [2018-2022] Hewlett Packard Enterprise Development LP
//  Note: File corresponds to AOS 8.10.x.x release

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: aruba-iot-nb-ble-data.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of frame sent by devices and forwarded by the Aruba WLAN.
// The raw values match those in the standard. The missing values are for frames that are only sent from AP to sensor
type BleFrameType int32

const (
	// Connectable undirected advertising which can be connected to by any BLE central.
	BleFrameType_adv_ind BleFrameType = 0
	// Connectable directed advertising which can be connected to by one specific Central.
	BleFrameType_adv_direct_ind BleFrameType = 1
	// Non-connectable undirected advertising which cannot be connected to and cannot respond to a scan request.
	BleFrameType_adv_nonconn_ind BleFrameType = 2
	// The scan response packet containing any additional info sent by the peripheral.
	BleFrameType_scan_rsp BleFrameType = 4
	// Scannable undirected advertising which cannot be connected to but which can respond to a scan request.
	BleFrameType_adv_scan_ind BleFrameType = 6
)

// Enum value maps for BleFrameType.
var (
	BleFrameType_name = map[int32]string{
		0: "adv_ind",
		1: "adv_direct_ind",
		2: "adv_nonconn_ind",
		4: "scan_rsp",
		6: "adv_scan_ind",
	}
	BleFrameType_value = map[string]int32{
		"adv_ind":         0,
		"adv_direct_ind":  1,
		"adv_nonconn_ind": 2,
		"scan_rsp":        4,
		"adv_scan_ind":    6,
	}
)

func (x BleFrameType) Enum() *BleFrameType {
	p := new(BleFrameType)
	*p = x
	return p
}

func (x BleFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BleFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_ble_data_proto_enumTypes[0].Descriptor()
}

func (BleFrameType) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_ble_data_proto_enumTypes[0]
}

func (x BleFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BleFrameType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BleFrameType(num)
	return nil
}

// Deprecated: Use BleFrameType.Descriptor instead.
func (BleFrameType) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_ble_data_proto_rawDescGZIP(), []int{0}
}

// Address type for the devices forwarded by the Aruba WLAN
// The raw values match those in the Bluetooth Standard.
type MacAddrType int32

const (
	// Public MAC Address
	MacAddrType_addr_type_public MacAddrType = 0
	// Static MAC Address
	MacAddrType_addr_type_static MacAddrType = 1
	// Private Non-Resolvable MAC Address
	MacAddrType_addr_type_private_non_resolvable MacAddrType = 2
	// Private Resolvable MAC Address
	MacAddrType_addr_type_private_resolvable MacAddrType = 3
)

// Enum value maps for MacAddrType.
var (
	MacAddrType_name = map[int32]string{
		0: "addr_type_public",
		1: "addr_type_static",
		2: "addr_type_private_non_resolvable",
		3: "addr_type_private_resolvable",
	}
	MacAddrType_value = map[string]int32{
		"addr_type_public":                 0,
		"addr_type_static":                 1,
		"addr_type_private_non_resolvable": 2,
		"addr_type_private_resolvable":     3,
	}
)

func (x MacAddrType) Enum() *MacAddrType {
	p := new(MacAddrType)
	*p = x
	return p
}

func (x MacAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_ble_data_proto_enumTypes[1].Descriptor()
}

func (MacAddrType) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_ble_data_proto_enumTypes[1]
}

func (x MacAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MacAddrType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MacAddrType(num)
	return nil
}

// Deprecated: Use MacAddrType.Descriptor instead.
func (MacAddrType) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_ble_data_proto_rawDescGZIP(), []int{1}
}

type BleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Advertisement address of the sender
	Mac []byte `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Frame Type
	FrameType *BleFrameType `protobuf:"varint,2,opt,name=frameType,enum=aruba_telemetry.BleFrameType" json:"frameType,omitempty"`
	// raw payload - up to to 31 bytes for Bluetooth 4.1; up to 255 bytes for BT 4.2 and higher
	Data []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// signal strength in dBm
	Rssi *int32 `protobuf:"zigzag32,4,opt,name=rssi" json:"rssi,omitempty"`
	// Mac Address Type
	AddrType *MacAddrType `protobuf:"varint,5,opt,name=addrType,enum=aruba_telemetry.MacAddrType" json:"addrType,omitempty"`
	// APB mac address
	ApbMac []byte `protobuf:"bytes,6,opt,name=apbMac" json:"apbMac,omitempty"`
}

func (x *BleData) Reset() {
	*x = BleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_ble_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BleData) ProtoMessage() {}

func (x *BleData) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_ble_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BleData.ProtoReflect.Descriptor instead.
func (*BleData) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_ble_data_proto_rawDescGZIP(), []int{0}
}

func (x *BleData) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *BleData) GetFrameType() BleFrameType {
	if x != nil && x.FrameType != nil {
		return *x.FrameType
	}
	return BleFrameType_adv_ind
}

func (x *BleData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BleData) GetRssi() int32 {
	if x != nil && x.Rssi != nil {
		return *x.Rssi
	}
	return 0
}

func (x *BleData) GetAddrType() MacAddrType {
	if x != nil && x.AddrType != nil {
		return *x.AddrType
	}
	return MacAddrType_addr_type_public
}

func (x *BleData) GetApbMac() []byte {
	if x != nil {
		return x.ApbMac
	}
	return nil
}

var File_aruba_iot_nb_ble_data_proto protoreflect.FileDescriptor

var file_aruba_iot_nb_ble_data_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x62,
	0x6c, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0xd2,
	0x01, 0x0a, 0x07, 0x42, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x3b, 0x0a, 0x09,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x42, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x72, 0x73, 0x73,
	0x69, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x62, 0x4d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x62,
	0x4d, 0x61, 0x63, 0x2a, 0x64, 0x0a, 0x0c, 0x42, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x73, 0x70, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x64, 0x76, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x10, 0x06, 0x2a, 0x81, 0x01, 0x0a, 0x0b, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x42, 0x1b, 0x5a,
	0x19, 0x6c, 0x75, 0x62, 0x64, 0x75, 0x62, 0x2e, 0x6e, 0x6c, 0x2f, 0x61, 0x72, 0x75, 0x62, 0x61,
	0x2d, 0x69, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_aruba_iot_nb_ble_data_proto_rawDescOnce sync.Once
	file_aruba_iot_nb_ble_data_proto_rawDescData = file_aruba_iot_nb_ble_data_proto_rawDesc
)

func file_aruba_iot_nb_ble_data_proto_rawDescGZIP() []byte {
	file_aruba_iot_nb_ble_data_proto_rawDescOnce.Do(func() {
		file_aruba_iot_nb_ble_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruba_iot_nb_ble_data_proto_rawDescData)
	})
	return file_aruba_iot_nb_ble_data_proto_rawDescData
}

var file_aruba_iot_nb_ble_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aruba_iot_nb_ble_data_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aruba_iot_nb_ble_data_proto_goTypes = []any{
	(BleFrameType)(0), // 0: aruba_telemetry.BleFrameType
	(MacAddrType)(0),  // 1: aruba_telemetry.MacAddrType
	(*BleData)(nil),   // 2: aruba_telemetry.BleData
}
var file_aruba_iot_nb_ble_data_proto_depIdxs = []int32{
	0, // 0: aruba_telemetry.BleData.frameType:type_name -> aruba_telemetry.BleFrameType
	1, // 1: aruba_telemetry.BleData.addrType:type_name -> aruba_telemetry.MacAddrType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_aruba_iot_nb_ble_data_proto_init() }
func file_aruba_iot_nb_ble_data_proto_init() {
	if File_aruba_iot_nb_ble_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aruba_iot_nb_ble_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruba_iot_nb_ble_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aruba_iot_nb_ble_data_proto_goTypes,
		DependencyIndexes: file_aruba_iot_nb_ble_data_proto_depIdxs,
		EnumInfos:         file_aruba_iot_nb_ble_data_proto_enumTypes,
		MessageInfos:      file_aruba_iot_nb_ble_data_proto_msgTypes,
	}.Build()
	File_aruba_iot_nb_ble_data_proto = out.File
	file_aruba_iot_nb_ble_data_proto_rawDesc = nil
	file_aruba_iot_nb_ble_data_proto_goTypes = nil
	file_aruba_iot_nb_ble_data_proto_depIdxs = nil
}

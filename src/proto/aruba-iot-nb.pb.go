//  (C) Copyright [2018-2022] Hewlett Packard Enterprise Development LP
//  Note: File corresponds to AOS 8.10.x.x release

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: aruba-iot-nb.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Details of the access point (AP) reporting the scanned IoT devices
type Reporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AP name string
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// AP Ethernet MAC address
	Mac []byte `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	// AP IPv4 address
	Ipv4 *string `protobuf:"bytes,3,opt,name=ipv4" json:"ipv4,omitempty"`
	// AP IPv6 address
	Ipv6 *string `protobuf:"bytes,4,opt,name=ipv6" json:"ipv6,omitempty"`
	// AP HW type string
	HwType *string `protobuf:"bytes,5,opt,name=hwType" json:"hwType,omitempty"`
	// AOS software version string
	SwVersion *string `protobuf:"bytes,6,opt,name=swVersion" json:"swVersion,omitempty"`
	// AOS software build string
	SwBuild *string `protobuf:"bytes,7,opt,name=swBuild" json:"swBuild,omitempty"`
	// Current AP timestamp
	Time *uint64 `protobuf:"varint,8,opt,name=time" json:"time,omitempty"`
}

func (x *Reporter) Reset() {
	*x = Reporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reporter) ProtoMessage() {}

func (x *Reporter) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reporter.ProtoReflect.Descriptor instead.
func (*Reporter) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_proto_rawDescGZIP(), []int{0}
}

func (x *Reporter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Reporter) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *Reporter) GetIpv4() string {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return ""
}

func (x *Reporter) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *Reporter) GetHwType() string {
	if x != nil && x.HwType != nil {
		return *x.HwType
	}
	return ""
}

func (x *Reporter) GetSwVersion() string {
	if x != nil && x.SwVersion != nil {
		return *x.SwVersion
	}
	return ""
}

func (x *Reporter) GetSwBuild() string {
	if x != nil && x.SwBuild != nil {
		return *x.SwBuild
	}
	return ""
}

func (x *Reporter) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// This is the main NorthBound message container.
// This interface started as pure NB telemetry, hence the
// name of this message type
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta     *Meta     `protobuf:"bytes,1,req,name=meta" json:"meta,omitempty"`
	Reporter *Reporter `protobuf:"bytes,2,req,name=reporter" json:"reporter,omitempty"`
	// from: aruba-iot-nb-telemetry.proto
	// This topic is only filled in for periodic telemetry
	// reporting messages.
	Reported []*Reported `protobuf:"bytes,3,rep,name=reported" json:"reported,omitempty"`
	// from: aruba-iot-nb-action-results.proto
	// This topic is for reporting results from Actions issued
	// by the server. This topic just reports the action status.
	// Any associated value updated will come as topic of the 'values' topic
	Results []*ActionResult `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
	// from: aruba-iot-nb-characteristic.proto
	// This topic is used to convey updated BLE characteristics.
	// It could be as a response to a read action, a characteristics discovery action or
	// asynchronously as an update resulting from a GATT notification
	Characteristics []*Characteristic `protobuf:"bytes,5,rep,name=characteristics" json:"characteristics,omitempty"`
	// from: aruba-iot-nb-ble-data.proto
	// This topic is used to send entire BLE payloads of
	// advertisement frames or scan response frames.
	// Supported only for a limited number of devices and/or payloads
	BleData []*BleData `protobuf:"bytes,6,rep,name=bleData" json:"bleData,omitempty"`
	// from: aruba-iot-nb-wifi-data.proto
	// This topic is used to send WiFi device data
	WifiData []*WiFiData `protobuf:"bytes,7,rep,name=wifiData" json:"wifiData,omitempty"`
	// from: aruba-iot-nb-device-count.proto
	// This topic is used to send device counts only
	DevCount *DeviceCount `protobuf:"bytes,8,opt,name=devCount" json:"devCount,omitempty"`
	// from: aruba-iot-nb-status.proto
	// Topic is used to used for reporting generic status messages
	// to the server, that do not fit in other other topics
	Status *Status `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	// from: aruba-iot-nb-zb.proto
	// NB messages for Zigbee
	Zigbee *NbZbMsg `protobuf:"bytes,10,opt,name=zigbee" json:"zigbee,omitempty"`
	// from: aruba-iot-nb-serial-data.proto
	// Topic is used for forwarding serial messages received from
	// a 3rd party IoT radio to the configured server
	NbSData []*NbSerialData `protobuf:"bytes,11,rep,name=nbSData" json:"nbSData,omitempty"`
	// from: aruba-iot-nb-ap-health-update.proto
	// Topic is used for AP Health update messages, also known as
	// keepalives. Generic information about APs will be put here
	ApHealth *ApHealthUpdate `protobuf:"bytes,12,opt,name=apHealth" json:"apHealth,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_proto_rawDescGZIP(), []int{1}
}

func (x *Telemetry) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Telemetry) GetReporter() *Reporter {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Telemetry) GetReported() []*Reported {
	if x != nil {
		return x.Reported
	}
	return nil
}

func (x *Telemetry) GetResults() []*ActionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Telemetry) GetCharacteristics() []*Characteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *Telemetry) GetBleData() []*BleData {
	if x != nil {
		return x.BleData
	}
	return nil
}

func (x *Telemetry) GetWifiData() []*WiFiData {
	if x != nil {
		return x.WifiData
	}
	return nil
}

func (x *Telemetry) GetDevCount() *DeviceCount {
	if x != nil {
		return x.DevCount
	}
	return nil
}

func (x *Telemetry) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Telemetry) GetZigbee() *NbZbMsg {
	if x != nil {
		return x.Zigbee
	}
	return nil
}

func (x *Telemetry) GetNbSData() []*NbSerialData {
	if x != nil {
		return x.NbSData
	}
	return nil
}

func (x *Telemetry) GetApHealth() *ApHealthUpdate {
	if x != nil {
		return x.ApHealth
	}
	return nil
}

var File_aruba_iot_nb_proto protoreflect.FileDescriptor

var file_aruba_iot_nb_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x15, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x72,
	0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x75, 0x62,
	0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61,
	0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x62,
	0x6c, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61,
	0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x77, 0x69, 0x66, 0x69,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72,
	0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69,
	0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x7a, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x61, 0x70, 0x2d,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x77, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xa6, 0x05, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72,
	0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a,
	0x07, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x42, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x35, 0x0a, 0x08, 0x77, 0x69, 0x66, 0x69, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x77, 0x69, 0x66, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x65, 0x76, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x7a, 0x69, 0x67, 0x62, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x62, 0x5a, 0x62, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x7a,
	0x69, 0x67, 0x62, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x62, 0x53, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x62, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6e, 0x62, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x08, 0x61, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x41, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x61, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x1b, 0x5a, 0x19, 0x6c,
	0x75, 0x62, 0x64, 0x75, 0x62, 0x2e, 0x6e, 0x6c, 0x2f, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69,
	0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_aruba_iot_nb_proto_rawDescOnce sync.Once
	file_aruba_iot_nb_proto_rawDescData = file_aruba_iot_nb_proto_rawDesc
)

func file_aruba_iot_nb_proto_rawDescGZIP() []byte {
	file_aruba_iot_nb_proto_rawDescOnce.Do(func() {
		file_aruba_iot_nb_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruba_iot_nb_proto_rawDescData)
	})
	return file_aruba_iot_nb_proto_rawDescData
}

var file_aruba_iot_nb_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aruba_iot_nb_proto_goTypes = []any{
	(*Reporter)(nil),       // 0: aruba_telemetry.Reporter
	(*Telemetry)(nil),      // 1: aruba_telemetry.Telemetry
	(*Meta)(nil),           // 2: aruba_telemetry.Meta
	(*Reported)(nil),       // 3: aruba_telemetry.Reported
	(*ActionResult)(nil),   // 4: aruba_telemetry.ActionResult
	(*Characteristic)(nil), // 5: aruba_telemetry.Characteristic
	(*BleData)(nil),        // 6: aruba_telemetry.BleData
	(*WiFiData)(nil),       // 7: aruba_telemetry.WiFiData
	(*DeviceCount)(nil),    // 8: aruba_telemetry.DeviceCount
	(*Status)(nil),         // 9: aruba_telemetry.Status
	(*NbZbMsg)(nil),        // 10: aruba_telemetry.NbZbMsg
	(*NbSerialData)(nil),   // 11: aruba_telemetry.NbSerialData
	(*ApHealthUpdate)(nil), // 12: aruba_telemetry.ApHealthUpdate
}
var file_aruba_iot_nb_proto_depIdxs = []int32{
	2,  // 0: aruba_telemetry.Telemetry.meta:type_name -> aruba_telemetry.Meta
	0,  // 1: aruba_telemetry.Telemetry.reporter:type_name -> aruba_telemetry.Reporter
	3,  // 2: aruba_telemetry.Telemetry.reported:type_name -> aruba_telemetry.Reported
	4,  // 3: aruba_telemetry.Telemetry.results:type_name -> aruba_telemetry.ActionResult
	5,  // 4: aruba_telemetry.Telemetry.characteristics:type_name -> aruba_telemetry.Characteristic
	6,  // 5: aruba_telemetry.Telemetry.bleData:type_name -> aruba_telemetry.BleData
	7,  // 6: aruba_telemetry.Telemetry.wifiData:type_name -> aruba_telemetry.WiFiData
	8,  // 7: aruba_telemetry.Telemetry.devCount:type_name -> aruba_telemetry.DeviceCount
	9,  // 8: aruba_telemetry.Telemetry.status:type_name -> aruba_telemetry.Status
	10, // 9: aruba_telemetry.Telemetry.zigbee:type_name -> aruba_telemetry.NbZbMsg
	11, // 10: aruba_telemetry.Telemetry.nbSData:type_name -> aruba_telemetry.NbSerialData
	12, // 11: aruba_telemetry.Telemetry.apHealth:type_name -> aruba_telemetry.ApHealthUpdate
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_aruba_iot_nb_proto_init() }
func file_aruba_iot_nb_proto_init() {
	if File_aruba_iot_nb_proto != nil {
		return
	}
	file_aruba_iot_types_proto_init()
	file_aruba_iot_nb_telemetry_proto_init()
	file_aruba_iot_nb_action_results_proto_init()
	file_aruba_iot_nb_characteristic_proto_init()
	file_aruba_iot_nb_ble_data_proto_init()
	file_aruba_iot_nb_wifi_data_proto_init()
	file_aruba_iot_nb_device_count_proto_init()
	file_aruba_iot_nb_status_proto_init()
	file_aruba_iot_nb_zb_proto_init()
	file_aruba_iot_nb_serial_data_proto_init()
	file_aruba_iot_nb_ap_health_update_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aruba_iot_nb_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Reporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruba_iot_nb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aruba_iot_nb_proto_goTypes,
		DependencyIndexes: file_aruba_iot_nb_proto_depIdxs,
		MessageInfos:      file_aruba_iot_nb_proto_msgTypes,
	}.Build()
	File_aruba_iot_nb_proto = out.File
	file_aruba_iot_nb_proto_rawDesc = nil
	file_aruba_iot_nb_proto_goTypes = nil
	file_aruba_iot_nb_proto_depIdxs = nil
}

//  (C) Copyright [2018-2022] Hewlett Packard Enterprise Development LP
//  Note: File corresponds to AOS 8.10.x.x release

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.6.1
// source: aruba-iot-nb-telemetry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Values for rocker switch position
type RockerSwitchPosition int32

const (
	RockerSwitchPosition_idle          RockerSwitchPosition = 0
	RockerSwitchPosition_topPressed    RockerSwitchPosition = 1
	RockerSwitchPosition_bottomPressed RockerSwitchPosition = 2
)

// Enum value maps for RockerSwitchPosition.
var (
	RockerSwitchPosition_name = map[int32]string{
		0: "idle",
		1: "topPressed",
		2: "bottomPressed",
	}
	RockerSwitchPosition_value = map[string]int32{
		"idle":          0,
		"topPressed":    1,
		"bottomPressed": 2,
	}
)

func (x RockerSwitchPosition) Enum() *RockerSwitchPosition {
	p := new(RockerSwitchPosition)
	*p = x
	return p
}

func (x RockerSwitchPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RockerSwitchPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[0].Descriptor()
}

func (RockerSwitchPosition) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[0]
}

func (x RockerSwitchPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RockerSwitchPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RockerSwitchPosition(num)
	return nil
}

// Deprecated: Use RockerSwitchPosition.Descriptor instead.
func (RockerSwitchPosition) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{0}
}

// Enum values indicate device's status w.r.t. cell size
// as defined in the IoT transport profile
type CellEvent int32

const (
	CellEvent_entry  CellEvent = 0
	CellEvent_exit   CellEvent = 1
	CellEvent_update CellEvent = 2
	CellEvent_ageout CellEvent = 3
)

// Enum value maps for CellEvent.
var (
	CellEvent_name = map[int32]string{
		0: "entry",
		1: "exit",
		2: "update",
		3: "ageout",
	}
	CellEvent_value = map[string]int32{
		"entry":  0,
		"exit":   1,
		"update": 2,
		"ageout": 3,
	}
)

func (x CellEvent) Enum() *CellEvent {
	p := new(CellEvent)
	*p = x
	return p
}

func (x CellEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[1].Descriptor()
}

func (CellEvent) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[1]
}

func (x CellEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CellEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CellEvent(num)
	return nil
}

// Deprecated: Use CellEvent.Descriptor instead.
func (CellEvent) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{1}
}

// Values for accelerometer status
type AccelStatus int32

const (
	AccelStatus_ok         AccelStatus = 0
	AccelStatus_outOfRange AccelStatus = 1
	AccelStatus_threshold1 AccelStatus = 2
	AccelStatus_threshold2 AccelStatus = 3
)

// Enum value maps for AccelStatus.
var (
	AccelStatus_name = map[int32]string{
		0: "ok",
		1: "outOfRange",
		2: "threshold1",
		3: "threshold2",
	}
	AccelStatus_value = map[string]int32{
		"ok":         0,
		"outOfRange": 1,
		"threshold1": 2,
		"threshold2": 3,
	}
)

func (x AccelStatus) Enum() *AccelStatus {
	p := new(AccelStatus)
	*p = x
	return p
}

func (x AccelStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccelStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[2].Descriptor()
}

func (AccelStatus) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[2]
}

func (x AccelStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccelStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccelStatus(num)
	return nil
}

// Deprecated: Use AccelStatus.Descriptor instead.
func (AccelStatus) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{2}
}

// Values for type of alarm sensor onboard BLE device
type Alarm int32

const (
	Alarm_water      Alarm = 1
	Alarm_smoke      Alarm = 2
	Alarm_fire       Alarm = 3
	Alarm_glassbreak Alarm = 4
	Alarm_intrusion  Alarm = 5
)

// Enum value maps for Alarm.
var (
	Alarm_name = map[int32]string{
		1: "water",
		2: "smoke",
		3: "fire",
		4: "glassbreak",
		5: "intrusion",
	}
	Alarm_value = map[string]int32{
		"water":      1,
		"smoke":      2,
		"fire":       3,
		"glassbreak": 4,
		"intrusion":  5,
	}
)

func (x Alarm) Enum() *Alarm {
	p := new(Alarm)
	*p = x
	return p
}

func (x Alarm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alarm) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[3].Descriptor()
}

func (Alarm) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[3]
}

func (x Alarm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Alarm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Alarm(num)
	return nil
}

// Deprecated: Use Alarm.Descriptor instead.
func (Alarm) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{3}
}

// Values for contact sensor onboard BLE device
type ContactPosition int32

const (
	ContactPosition_open   ContactPosition = 1
	ContactPosition_closed ContactPosition = 2
)

// Enum value maps for ContactPosition.
var (
	ContactPosition_name = map[int32]string{
		1: "open",
		2: "closed",
	}
	ContactPosition_value = map[string]int32{
		"open":   1,
		"closed": 2,
	}
)

func (x ContactPosition) Enum() *ContactPosition {
	p := new(ContactPosition)
	*p = x
	return p
}

func (x ContactPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[4].Descriptor()
}

func (ContactPosition) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[4]
}

func (x ContactPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContactPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContactPosition(num)
	return nil
}

// Deprecated: Use ContactPosition.Descriptor instead.
func (ContactPosition) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{4}
}

// Values for mechanical handle sensor onboard BLE device
type MechanicalH int32

const (
	MechanicalH_upToRight   MechanicalH = 1
	MechanicalH_rightToDown MechanicalH = 2
	MechanicalH_downToLeft  MechanicalH = 3
	MechanicalH_leftToUp    MechanicalH = 4
	MechanicalH_upToLeft    MechanicalH = 5
	MechanicalH_leftToDown  MechanicalH = 6
	MechanicalH_downToRight MechanicalH = 7
	MechanicalH_rightToUp   MechanicalH = 8
)

// Enum value maps for MechanicalH.
var (
	MechanicalH_name = map[int32]string{
		1: "upToRight",
		2: "rightToDown",
		3: "downToLeft",
		4: "leftToUp",
		5: "upToLeft",
		6: "leftToDown",
		7: "downToRight",
		8: "rightToUp",
	}
	MechanicalH_value = map[string]int32{
		"upToRight":   1,
		"rightToDown": 2,
		"downToLeft":  3,
		"leftToUp":    4,
		"upToLeft":    5,
		"leftToDown":  6,
		"downToRight": 7,
		"rightToUp":   8,
	}
)

func (x MechanicalH) Enum() *MechanicalH {
	p := new(MechanicalH)
	*p = x
	return p
}

func (x MechanicalH) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MechanicalH) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[5].Descriptor()
}

func (MechanicalH) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[5]
}

func (x MechanicalH) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MechanicalH) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MechanicalH(num)
	return nil
}

// Deprecated: Use MechanicalH.Descriptor instead.
func (MechanicalH) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{5}
}

// Values communicate the state of the switch sensor
// onboard the BLE device
type SwitchState int32

const (
	SwitchState_unknown SwitchState = 1
	SwitchState_on      SwitchState = 2
	SwitchState_off     SwitchState = 3
)

// Enum value maps for SwitchState.
var (
	SwitchState_name = map[int32]string{
		1: "unknown",
		2: "on",
		3: "off",
	}
	SwitchState_value = map[string]int32{
		"unknown": 1,
		"on":      2,
		"off":     3,
	}
)

func (x SwitchState) Enum() *SwitchState {
	p := new(SwitchState)
	*p = x
	return p
}

func (x SwitchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchState) Descriptor() protoreflect.EnumDescriptor {
	return file_aruba_iot_nb_telemetry_proto_enumTypes[6].Descriptor()
}

func (SwitchState) Type() protoreflect.EnumType {
	return &file_aruba_iot_nb_telemetry_proto_enumTypes[6]
}

func (x SwitchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SwitchState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SwitchState(num)
	return nil
}

// Deprecated: Use SwitchState.Descriptor instead.
func (SwitchState) EnumDescriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{6}
}

// Device firmware info. as decoded by AOS
type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active Firmware version
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Firmware version reporting format for specific devices
	BankA *string `protobuf:"bytes,2,opt,name=bankA" json:"bankA,omitempty"`
	// Firmware version reporting format for specific devices
	BankB *string `protobuf:"bytes,3,opt,name=bankB" json:"bankB,omitempty"`
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Firmware) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Firmware) GetBankA() string {
	if x != nil && x.BankA != nil {
		return *x.BankA
	}
	return ""
}

func (x *Firmware) GetBankB() string {
	if x != nil && x.BankB != nil {
		return *x.BankB
	}
	return ""
}

// RSSI history information
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// time of reading
	Time *uint64 `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	// RSSI value in dBm
	Rssi *int32 `protobuf:"zigzag32,2,req,name=rssi" json:"rssi,omitempty"`
	// radio id from where RSSI was received
	RxRadioId *int32 `protobuf:"varint,3,opt,name=rxRadioId" json:"rxRadioId,omitempty"`
	// Antenna value from where RSSI was recorded
	Antenna *int32 `protobuf:"varint,4,opt,name=antenna" json:"antenna,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *History) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *History) GetRssi() int32 {
	if x != nil && x.Rssi != nil {
		return *x.Rssi
	}
	return 0
}

func (x *History) GetRxRadioId() int32 {
	if x != nil && x.RxRadioId != nil {
		return *x.RxRadioId
	}
	return 0
}

func (x *History) GetAntenna() int32 {
	if x != nil && x.Antenna != nil {
		return *x.Antenna
	}
	return 0
}

// RSSI information for BLE device as configured in the
// transport profile over the most recent reporting interval
type Rssi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last (most recent) RSSI reading in a reporting interval
	Last *int32 `protobuf:"zigzag32,1,opt,name=last" json:"last,omitempty"`
	// average/mean RSSI reading over reporting interval
	Avg *int32 `protobuf:"zigzag32,2,opt,name=avg" json:"avg,omitempty"`
	// maximum RSSI reading over reporting interval
	Max *int32 `protobuf:"zigzag32,3,opt,name=max" json:"max,omitempty"`
	// report multiple RSSI readings over reporting interval
	History []*History `protobuf:"bytes,4,rep,name=history" json:"history,omitempty"`
	// Smooth the RSSI values using built-in smoothing function
	Smooth *int32 `protobuf:"zigzag32,5,opt,name=smooth" json:"smooth,omitempty"`
}

func (x *Rssi) Reset() {
	*x = Rssi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rssi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rssi) ProtoMessage() {}

func (x *Rssi) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rssi.ProtoReflect.Descriptor instead.
func (*Rssi) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *Rssi) GetLast() int32 {
	if x != nil && x.Last != nil {
		return *x.Last
	}
	return 0
}

func (x *Rssi) GetAvg() int32 {
	if x != nil && x.Avg != nil {
		return *x.Avg
	}
	return 0
}

func (x *Rssi) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *Rssi) GetHistory() []*History {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *Rssi) GetSmooth() int32 {
	if x != nil && x.Smooth != nil {
		return *x.Smooth
	}
	return 0
}

// Indicates device status when the cell size filter is set
// in the IoT transport profile
type BeaconEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *CellEvent `protobuf:"varint,1,opt,name=event,enum=aruba_telemetry.CellEvent" json:"event,omitempty"`
}

func (x *BeaconEvent) Reset() {
	*x = BeaconEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconEvent) ProtoMessage() {}

func (x *BeaconEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconEvent.ProtoReflect.Descriptor instead.
func (*BeaconEvent) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *BeaconEvent) GetEvent() CellEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return CellEvent_entry
}

// Indicates device status when the cell size filter is set
// in the IoT transport profile
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInside *bool    `protobuf:"varint,1,opt,name=isInside" json:"isInside,omitempty"`
	Distance *float32 `protobuf:"fixed32,2,opt,name=distance" json:"distance,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *Cell) GetIsInside() bool {
	if x != nil && x.IsInside != nil {
		return *x.IsInside
	}
	return false
}

func (x *Cell) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// IBeacon params. from device's advertisement data
type Ibeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  []byte  `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Major *uint32 `protobuf:"varint,2,req,name=major" json:"major,omitempty"`
	Minor *uint32 `protobuf:"varint,3,req,name=minor" json:"minor,omitempty"`
	Power *int32  `protobuf:"zigzag32,4,req,name=power" json:"power,omitempty"`
	Extra []byte  `protobuf:"bytes,5,opt,name=extra" json:"extra,omitempty"`
}

func (x *Ibeacon) Reset() {
	*x = Ibeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ibeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ibeacon) ProtoMessage() {}

func (x *Ibeacon) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ibeacon.ProtoReflect.Descriptor instead.
func (*Ibeacon) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *Ibeacon) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Ibeacon) GetMajor() uint32 {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return 0
}

func (x *Ibeacon) GetMinor() uint32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return 0
}

func (x *Ibeacon) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Ibeacon) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

// Eddystone UID params. from device's advertisement data
type EddyUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid []byte `protobuf:"bytes,1,req,name=nid" json:"nid,omitempty"`
	Bid []byte `protobuf:"bytes,2,req,name=bid" json:"bid,omitempty"`
}

func (x *EddyUID) Reset() {
	*x = EddyUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EddyUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EddyUID) ProtoMessage() {}

func (x *EddyUID) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EddyUID.ProtoReflect.Descriptor instead.
func (*EddyUID) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *EddyUID) GetNid() []byte {
	if x != nil {
		return x.Nid
	}
	return nil
}

func (x *EddyUID) GetBid() []byte {
	if x != nil {
		return x.Bid
	}
	return nil
}

// Eddystone URL params. from device's advertisement data
type EddyURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix     *uint32 `protobuf:"varint,1,req,name=prefix" json:"prefix,omitempty"`
	EncodedUrl []byte  `protobuf:"bytes,2,req,name=encodedUrl" json:"encodedUrl,omitempty"`
}

func (x *EddyURL) Reset() {
	*x = EddyURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EddyURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EddyURL) ProtoMessage() {}

func (x *EddyURL) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EddyURL.ProtoReflect.Descriptor instead.
func (*EddyURL) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *EddyURL) GetPrefix() uint32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *EddyURL) GetEncodedUrl() []byte {
	if x != nil {
		return x.EncodedUrl
	}
	return nil
}

// Eddystone txpower and UID/URL params. from device's advertisement data
type Eddystone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power *int32   `protobuf:"zigzag32,1,opt,name=power" json:"power,omitempty"`
	Uid   *EddyUID `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	Url   *EddyURL `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (x *Eddystone) Reset() {
	*x = Eddystone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eddystone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eddystone) ProtoMessage() {}

func (x *Eddystone) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eddystone.ProtoReflect.Descriptor instead.
func (*Eddystone) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *Eddystone) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Eddystone) GetUid() *EddyUID {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Eddystone) GetUrl() *EddyURL {
	if x != nil {
		return x.Url
	}
	return nil
}

type Beacons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ibeacon   *Ibeacon   `protobuf:"bytes,1,opt,name=ibeacon" json:"ibeacon,omitempty"`
	Eddystone *Eddystone `protobuf:"bytes,2,opt,name=eddystone" json:"eddystone,omitempty"` //  reserved                                  3;
}

func (x *Beacons) Reset() {
	*x = Beacons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beacons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beacons) ProtoMessage() {}

func (x *Beacons) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beacons.ProtoReflect.Descriptor instead.
func (*Beacons) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *Beacons) GetIbeacon() *Ibeacon {
	if x != nil {
		return x.Ibeacon
	}
	return nil
}

func (x *Beacons) GetEddystone() *Eddystone {
	if x != nil {
		return x.Eddystone
	}
	return nil
}

// Accelerometer sensor information
type Accelerometer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      *float32     `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y      *float32     `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z      *float32     `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
	Status *AccelStatus `protobuf:"varint,4,opt,name=status,enum=aruba_telemetry.AccelStatus" json:"status,omitempty"`
}

func (x *Accelerometer) Reset() {
	*x = Accelerometer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accelerometer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accelerometer) ProtoMessage() {}

func (x *Accelerometer) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accelerometer.ProtoReflect.Descriptor instead.
func (*Accelerometer) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *Accelerometer) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Accelerometer) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Accelerometer) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Accelerometer) GetStatus() AccelStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return AccelStatus_ok
}

// Rocker switch information onboard BLE device
type RockerSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string               `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	State *RockerSwitchPosition `protobuf:"varint,2,req,name=state,enum=aruba_telemetry.RockerSwitchPosition" json:"state,omitempty"`
}

func (x *RockerSwitch) Reset() {
	*x = RockerSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RockerSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RockerSwitch) ProtoMessage() {}

func (x *RockerSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RockerSwitch.ProtoReflect.Descriptor instead.
func (*RockerSwitch) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *RockerSwitch) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RockerSwitch) GetState() RockerSwitchPosition {
	if x != nil && x.State != nil {
		return *x.State
	}
	return RockerSwitchPosition_idle
}

// Contact sensor information
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32          `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	State *ContactPosition `protobuf:"varint,2,req,name=state,enum=aruba_telemetry.ContactPosition" json:"state,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{12}
}

func (x *Contact) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Contact) GetState() ContactPosition {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ContactPosition_open
}

// Occupancy sensor information
type Occupancy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *uint32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
}

func (x *Occupancy) Reset() {
	*x = Occupancy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occupancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occupancy) ProtoMessage() {}

func (x *Occupancy) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occupancy.ProtoReflect.Descriptor instead.
func (*Occupancy) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *Occupancy) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// Sensor values as decoded from BLE packets
// the units for the sensor values depends upon
// the underlying sensor/device type.
type Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accelerometer    *Accelerometer `protobuf:"bytes,1,opt,name=accelerometer" json:"accelerometer,omitempty"`
	Battery          *int32         `protobuf:"varint,2,opt,name=battery" json:"battery,omitempty"`
	TemperatureC     *float32       `protobuf:"fixed32,3,opt,name=temperatureC" json:"temperatureC,omitempty"`
	Humidity         *int32         `protobuf:"varint,4,opt,name=humidity" json:"humidity,omitempty"`
	Voltage          *float32       `protobuf:"fixed32,5,opt,name=voltage" json:"voltage,omitempty"`
	Illumination     *int32         `protobuf:"varint,6,opt,name=illumination" json:"illumination,omitempty"`
	Motion           *bool          `protobuf:"varint,7,opt,name=motion" json:"motion,omitempty"`
	Current          *int32         `protobuf:"zigzag32,8,opt,name=current" json:"current,omitempty"`
	CO               *int32         `protobuf:"varint,9,opt,name=CO" json:"CO,omitempty"`
	CO2              *int32         `protobuf:"varint,10,opt,name=CO2" json:"CO2,omitempty"`
	VOC              *int32         `protobuf:"varint,11,opt,name=VOC" json:"VOC,omitempty"`
	Resistance       *float32       `protobuf:"fixed32,12,opt,name=resistance" json:"resistance,omitempty"`
	Pressure         *int32         `protobuf:"zigzag32,13,opt,name=pressure" json:"pressure,omitempty"`
	Alarm            []Alarm        `protobuf:"varint,14,rep,name=alarm,enum=aruba_telemetry.Alarm" json:"alarm,omitempty"`
	Contact          []*Contact     `protobuf:"bytes,15,rep,name=contact" json:"contact,omitempty"`
	Occupancy        *Occupancy     `protobuf:"bytes,16,opt,name=occupancy" json:"occupancy,omitempty"`
	MechanicalHandle *MechanicalH   `protobuf:"varint,17,opt,name=mechanicalHandle,enum=aruba_telemetry.MechanicalH" json:"mechanicalHandle,omitempty"`
	Distance         *int32         `protobuf:"varint,18,opt,name=distance" json:"distance,omitempty"`
	Capacitance      *float32       `protobuf:"fixed32,19,opt,name=capacitance" json:"capacitance,omitempty"`
}

func (x *Sensors) Reset() {
	*x = Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensors) ProtoMessage() {}

func (x *Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensors.ProtoReflect.Descriptor instead.
func (*Sensors) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *Sensors) GetAccelerometer() *Accelerometer {
	if x != nil {
		return x.Accelerometer
	}
	return nil
}

func (x *Sensors) GetBattery() int32 {
	if x != nil && x.Battery != nil {
		return *x.Battery
	}
	return 0
}

func (x *Sensors) GetTemperatureC() float32 {
	if x != nil && x.TemperatureC != nil {
		return *x.TemperatureC
	}
	return 0
}

func (x *Sensors) GetHumidity() int32 {
	if x != nil && x.Humidity != nil {
		return *x.Humidity
	}
	return 0
}

func (x *Sensors) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *Sensors) GetIllumination() int32 {
	if x != nil && x.Illumination != nil {
		return *x.Illumination
	}
	return 0
}

func (x *Sensors) GetMotion() bool {
	if x != nil && x.Motion != nil {
		return *x.Motion
	}
	return false
}

func (x *Sensors) GetCurrent() int32 {
	if x != nil && x.Current != nil {
		return *x.Current
	}
	return 0
}

func (x *Sensors) GetCO() int32 {
	if x != nil && x.CO != nil {
		return *x.CO
	}
	return 0
}

func (x *Sensors) GetCO2() int32 {
	if x != nil && x.CO2 != nil {
		return *x.CO2
	}
	return 0
}

func (x *Sensors) GetVOC() int32 {
	if x != nil && x.VOC != nil {
		return *x.VOC
	}
	return 0
}

func (x *Sensors) GetResistance() float32 {
	if x != nil && x.Resistance != nil {
		return *x.Resistance
	}
	return 0
}

func (x *Sensors) GetPressure() int32 {
	if x != nil && x.Pressure != nil {
		return *x.Pressure
	}
	return 0
}

func (x *Sensors) GetAlarm() []Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *Sensors) GetContact() []*Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Sensors) GetOccupancy() *Occupancy {
	if x != nil {
		return x.Occupancy
	}
	return nil
}

func (x *Sensors) GetMechanicalHandle() MechanicalH {
	if x != nil && x.MechanicalHandle != nil {
		return *x.MechanicalHandle
	}
	return MechanicalH_upToRight
}

func (x *Sensors) GetDistance() int32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *Sensors) GetCapacitance() float32 {
	if x != nil && x.Capacitance != nil {
		return *x.Capacitance
	}
	return 0
}

// Statistics regarding the BLE device
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// device uptime in second
	Uptime *uint64 `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	// number of advertisement packets
	AdvCnt *uint64 `protobuf:"varint,2,opt,name=adv_cnt,json=advCnt" json:"adv_cnt,omitempty"`
	// sequence number of packet
	SeqNr *uint32 `protobuf:"varint,3,opt,name=seq_nr,json=seqNr" json:"seq_nr,omitempty"`
	// total frame count (advertisements and scan responses)
	// in a given reporting interval
	FrameCnt *uint32 `protobuf:"varint,4,req,name=frame_cnt,json=frameCnt" json:"frame_cnt,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{15}
}

func (x *Stats) GetUptime() uint64 {
	if x != nil && x.Uptime != nil {
		return *x.Uptime
	}
	return 0
}

func (x *Stats) GetAdvCnt() uint64 {
	if x != nil && x.AdvCnt != nil {
		return *x.AdvCnt
	}
	return 0
}

func (x *Stats) GetSeqNr() uint32 {
	if x != nil && x.SeqNr != nil {
		return *x.SeqNr
	}
	return 0
}

func (x *Stats) GetFrameCnt() uint32 {
	if x != nil && x.FrameCnt != nil {
		return *x.FrameCnt
	}
	return 0
}

// Values for different input modalities on BLE devices
type Inputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rocker switch information
	Rocker []*RockerSwitch `protobuf:"bytes,1,rep,name=rocker" json:"rocker,omitempty"`
	// Switch state information
	SwitchIndex []SwitchState `protobuf:"varint,2,rep,name=switchIndex,enum=aruba_telemetry.SwitchState" json:"switchIndex,omitempty"`
}

func (x *Inputs) Reset() {
	*x = Inputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inputs) ProtoMessage() {}

func (x *Inputs) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inputs.ProtoReflect.Descriptor instead.
func (*Inputs) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{16}
}

func (x *Inputs) GetRocker() []*RockerSwitch {
	if x != nil {
		return x.Rocker
	}
	return nil
}

func (x *Inputs) GetSwitchIndex() []SwitchState {
	if x != nil {
		return x.SwitchIndex
	}
	return nil
}

// Vendor data corresponds to the entity that
// manufactured the BLE device. This is a fixed mapping for
// certain vendors in AOS
type VendorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor *string `protobuf:"bytes,1,opt,name=vendor" json:"vendor,omitempty"`
	Data   []byte  `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
}

func (x *VendorData) Reset() {
	*x = VendorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorData) ProtoMessage() {}

func (x *VendorData) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorData.ProtoReflect.Descriptor instead.
func (*VendorData) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{17}
}

func (x *VendorData) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *VendorData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// BT SIG Company ID Information
type BTCompanyID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number corresponds to 2 byte hex for the company identifier
	Value *uint32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	// company name as specified in the BT SIG identifier list
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *BTCompanyID) Reset() {
	*x = BTCompanyID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCompanyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCompanyID) ProtoMessage() {}

func (x *BTCompanyID) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCompanyID.ProtoReflect.Descriptor instead.
func (*BTCompanyID) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{18}
}

func (x *BTCompanyID) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *BTCompanyID) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Values contained herein correspond to BLE device information
// gleaned from advertisement/scan responses that are decoded by
// the Aruba infrastructure. The periodicity of this message is
// controlled by the transport profile parameters.
type Reported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BLE MAC address of observed device
	Mac []byte `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	// Device class label assigned by AOS infra
	// see aruba-iot-types.proto
	DeviceClass []DeviceClassEnum `protobuf:"varint,2,rep,name=deviceClass,enum=aruba_telemetry.DeviceClassEnum" json:"deviceClass,omitempty"`
	// Device model number as decoded by AOS
	Model *string `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	// Device firmware info. as decoded by AOS
	Firmware *Firmware `protobuf:"bytes,4,opt,name=firmware" json:"firmware,omitempty"`
	// Device specific id
	AssetId *string `protobuf:"bytes,5,opt,name=assetId" json:"assetId,omitempty"`
	// Device public key
	PublicKey []byte `protobuf:"bytes,6,opt,name=publicKey" json:"publicKey,omitempty"`
	// Timestamp device data was recorded by this AP/APB
	LastSeen *uint64 `protobuf:"varint,7,opt,name=lastSeen" json:"lastSeen,omitempty"`
	// Indicate device's status w.r.t. cell size
	// as defined in the IoT transport profile
	Bevent *BeaconEvent `protobuf:"bytes,9,opt,name=bevent" json:"bevent,omitempty"`
	// Observed RSSI information
	Rssi *Rssi `protobuf:"bytes,10,opt,name=rssi" json:"rssi,omitempty"`
	// Indicate device's status w.r.t. cell size
	// as defined in the IoT transport profile
	Cell *Cell `protobuf:"bytes,11,opt,name=cell" json:"cell,omitempty"`
	// IBeacon/Eddystone decoded fields
	Beacons []*Beacons `protobuf:"bytes,12,rep,name=beacons" json:"beacons,omitempty"`
	// Device Transmit power
	Txpower *int32 `protobuf:"zigzag32,13,opt,name=txpower" json:"txpower,omitempty"`
	// Sensor values
	Sensors *Sensors `protobuf:"bytes,14,opt,name=sensors" json:"sensors,omitempty"`
	// BLE device packet statistics
	Stats *Stats `protobuf:"bytes,16,opt,name=stats" json:"stats,omitempty"`
	// BLE device that are capable of receiving physical input from user
	Inputs *Inputs `protobuf:"bytes,17,opt,name=inputs" json:"inputs,omitempty"`
	// Vendor information for BLE device
	VendorData *VendorData `protobuf:"bytes,18,opt,name=vendorData" json:"vendorData,omitempty"`
	// Vendor name string
	VendorName *string `protobuf:"bytes,19,opt,name=vendorName" json:"vendorName,omitempty"`
	// Timestamp when sensor values were updated
	SensorTimestamp *uint64 `protobuf:"varint,20,opt,name=sensorTimestamp" json:"sensorTimestamp,omitempty"`
	// Any flags values set for the BLE device
	Flags *uint32 `protobuf:"varint,21,opt,name=flags" json:"flags,omitempty"`
	// Localname string seen in BLE packets
	LocalName *string `protobuf:"bytes,22,opt,name=localName" json:"localName,omitempty"`
	// Identity string observed from BLE packets
	Identity *string `protobuf:"bytes,23,opt,name=identity" json:"identity,omitempty"`
	// BT SIG company identifier information
	CompanyIdentifier []*BTCompanyID `protobuf:"bytes,24,rep,name=companyIdentifier" json:"companyIdentifier,omitempty"`
}

func (x *Reported) Reset() {
	*x = Reported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reported) ProtoMessage() {}

func (x *Reported) ProtoReflect() protoreflect.Message {
	mi := &file_aruba_iot_nb_telemetry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reported.ProtoReflect.Descriptor instead.
func (*Reported) Descriptor() ([]byte, []int) {
	return file_aruba_iot_nb_telemetry_proto_rawDescGZIP(), []int{19}
}

func (x *Reported) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *Reported) GetDeviceClass() []DeviceClassEnum {
	if x != nil {
		return x.DeviceClass
	}
	return nil
}

func (x *Reported) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Reported) GetFirmware() *Firmware {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *Reported) GetAssetId() string {
	if x != nil && x.AssetId != nil {
		return *x.AssetId
	}
	return ""
}

func (x *Reported) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Reported) GetLastSeen() uint64 {
	if x != nil && x.LastSeen != nil {
		return *x.LastSeen
	}
	return 0
}

func (x *Reported) GetBevent() *BeaconEvent {
	if x != nil {
		return x.Bevent
	}
	return nil
}

func (x *Reported) GetRssi() *Rssi {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *Reported) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *Reported) GetBeacons() []*Beacons {
	if x != nil {
		return x.Beacons
	}
	return nil
}

func (x *Reported) GetTxpower() int32 {
	if x != nil && x.Txpower != nil {
		return *x.Txpower
	}
	return 0
}

func (x *Reported) GetSensors() *Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Reported) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Reported) GetInputs() *Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Reported) GetVendorData() *VendorData {
	if x != nil {
		return x.VendorData
	}
	return nil
}

func (x *Reported) GetVendorName() string {
	if x != nil && x.VendorName != nil {
		return *x.VendorName
	}
	return ""
}

func (x *Reported) GetSensorTimestamp() uint64 {
	if x != nil && x.SensorTimestamp != nil {
		return *x.SensorTimestamp
	}
	return 0
}

func (x *Reported) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Reported) GetLocalName() string {
	if x != nil && x.LocalName != nil {
		return *x.LocalName
	}
	return ""
}

func (x *Reported) GetIdentity() string {
	if x != nil && x.Identity != nil {
		return *x.Identity
	}
	return ""
}

func (x *Reported) GetCompanyIdentifier() []*BTCompanyID {
	if x != nil {
		return x.CompanyIdentifier
	}
	return nil
}

var File_aruba_iot_nb_telemetry_proto protoreflect.FileDescriptor

var file_aruba_iot_nb_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x6e, 0x62, 0x2d, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a,
	0x15, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x61, 0x6e, 0x6b, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x6e,
	0x6b, 0x41, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x22, 0x69, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x78, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x78, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x52, 0x73, 0x73, 0x69, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x61,
	0x76, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68,
	0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x3e, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x75, 0x0a, 0x07, 0x49, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x11, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x2d, 0x0a, 0x07, 0x45, 0x64, 0x64, 0x79,
	0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x07, 0x45, 0x64, 0x64, 0x79, 0x55,
	0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x79, 0x0a, 0x09, 0x45, 0x64,
	0x64, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x64,
	0x79, 0x55, 0x49, 0x44, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x64, 0x79, 0x55, 0x52, 0x4c,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x07, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x07, 0x69, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x49, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x64, 0x64, 0x79, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x64, 0x64, 0x79, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x52, 0x09, 0x65, 0x64, 0x64, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x22, 0x6f,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62,
	0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5b, 0x0a, 0x0c, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x21, 0x0a, 0x09, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0xad, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x44,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6c, 0x6c, 0x75,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x69, 0x6c, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x43, 0x4f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x43, 0x4f, 0x12, 0x10,
	0x0a, 0x03, 0x43, 0x4f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x43, 0x4f, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x4f, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x56,
	0x4f, 0x43, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x32, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x48, 0x52, 0x10, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x64, 0x76, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x4e, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6e, 0x74,
	0x22, 0x7f, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x72, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x38, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x0b, 0x42,
	0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x91, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x62, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x75,
	0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x73, 0x73,
	0x69, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65,
	0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x78, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x75, 0x62, 0x61, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x54, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2a, 0x43, 0x0a, 0x14, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x09, 0x43,
	0x65, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x67, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x6b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x32, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x05,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x66,
	0x69, 0x72, 0x65, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x05, 0x2a, 0x27, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x89, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x12, 0x0d, 0x0a,
	0x09, 0x75, 0x70, 0x54, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x6f, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x75,
	0x70, 0x54, 0x6f, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x65, 0x66,
	0x74, 0x54, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x10, 0x08, 0x2a, 0x2b, 0x0a, 0x0b, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x6f, 0x66, 0x66, 0x10, 0x03, 0x42, 0x1b, 0x5a, 0x19, 0x6c, 0x75, 0x62, 0x64, 0x75, 0x62,
	0x2e, 0x6e, 0x6c, 0x2f, 0x61, 0x72, 0x75, 0x62, 0x61, 0x2d, 0x69, 0x6f, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_aruba_iot_nb_telemetry_proto_rawDescOnce sync.Once
	file_aruba_iot_nb_telemetry_proto_rawDescData = file_aruba_iot_nb_telemetry_proto_rawDesc
)

func file_aruba_iot_nb_telemetry_proto_rawDescGZIP() []byte {
	file_aruba_iot_nb_telemetry_proto_rawDescOnce.Do(func() {
		file_aruba_iot_nb_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruba_iot_nb_telemetry_proto_rawDescData)
	})
	return file_aruba_iot_nb_telemetry_proto_rawDescData
}

var file_aruba_iot_nb_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_aruba_iot_nb_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_aruba_iot_nb_telemetry_proto_goTypes = []any{
	(RockerSwitchPosition)(0), // 0: aruba_telemetry.rockerSwitchPosition
	(CellEvent)(0),            // 1: aruba_telemetry.CellEvent
	(AccelStatus)(0),          // 2: aruba_telemetry.AccelStatus
	(Alarm)(0),                // 3: aruba_telemetry.Alarm
	(ContactPosition)(0),      // 4: aruba_telemetry.ContactPosition
	(MechanicalH)(0),          // 5: aruba_telemetry.MechanicalH
	(SwitchState)(0),          // 6: aruba_telemetry.switchState
	(*Firmware)(nil),          // 7: aruba_telemetry.Firmware
	(*History)(nil),           // 8: aruba_telemetry.History
	(*Rssi)(nil),              // 9: aruba_telemetry.Rssi
	(*BeaconEvent)(nil),       // 10: aruba_telemetry.BeaconEvent
	(*Cell)(nil),              // 11: aruba_telemetry.Cell
	(*Ibeacon)(nil),           // 12: aruba_telemetry.Ibeacon
	(*EddyUID)(nil),           // 13: aruba_telemetry.EddyUID
	(*EddyURL)(nil),           // 14: aruba_telemetry.EddyURL
	(*Eddystone)(nil),         // 15: aruba_telemetry.Eddystone
	(*Beacons)(nil),           // 16: aruba_telemetry.Beacons
	(*Accelerometer)(nil),     // 17: aruba_telemetry.Accelerometer
	(*RockerSwitch)(nil),      // 18: aruba_telemetry.RockerSwitch
	(*Contact)(nil),           // 19: aruba_telemetry.Contact
	(*Occupancy)(nil),         // 20: aruba_telemetry.Occupancy
	(*Sensors)(nil),           // 21: aruba_telemetry.Sensors
	(*Stats)(nil),             // 22: aruba_telemetry.Stats
	(*Inputs)(nil),            // 23: aruba_telemetry.Inputs
	(*VendorData)(nil),        // 24: aruba_telemetry.VendorData
	(*BTCompanyID)(nil),       // 25: aruba_telemetry.BTCompanyID
	(*Reported)(nil),          // 26: aruba_telemetry.Reported
	(DeviceClassEnum)(0),      // 27: aruba_telemetry.deviceClassEnum
}
var file_aruba_iot_nb_telemetry_proto_depIdxs = []int32{
	8,  // 0: aruba_telemetry.Rssi.history:type_name -> aruba_telemetry.History
	1,  // 1: aruba_telemetry.BeaconEvent.event:type_name -> aruba_telemetry.CellEvent
	13, // 2: aruba_telemetry.Eddystone.uid:type_name -> aruba_telemetry.EddyUID
	14, // 3: aruba_telemetry.Eddystone.url:type_name -> aruba_telemetry.EddyURL
	12, // 4: aruba_telemetry.Beacons.ibeacon:type_name -> aruba_telemetry.Ibeacon
	15, // 5: aruba_telemetry.Beacons.eddystone:type_name -> aruba_telemetry.Eddystone
	2,  // 6: aruba_telemetry.Accelerometer.status:type_name -> aruba_telemetry.AccelStatus
	0,  // 7: aruba_telemetry.RockerSwitch.state:type_name -> aruba_telemetry.rockerSwitchPosition
	4,  // 8: aruba_telemetry.Contact.state:type_name -> aruba_telemetry.ContactPosition
	17, // 9: aruba_telemetry.Sensors.accelerometer:type_name -> aruba_telemetry.Accelerometer
	3,  // 10: aruba_telemetry.Sensors.alarm:type_name -> aruba_telemetry.Alarm
	19, // 11: aruba_telemetry.Sensors.contact:type_name -> aruba_telemetry.Contact
	20, // 12: aruba_telemetry.Sensors.occupancy:type_name -> aruba_telemetry.Occupancy
	5,  // 13: aruba_telemetry.Sensors.mechanicalHandle:type_name -> aruba_telemetry.MechanicalH
	18, // 14: aruba_telemetry.Inputs.rocker:type_name -> aruba_telemetry.RockerSwitch
	6,  // 15: aruba_telemetry.Inputs.switchIndex:type_name -> aruba_telemetry.switchState
	27, // 16: aruba_telemetry.Reported.deviceClass:type_name -> aruba_telemetry.deviceClassEnum
	7,  // 17: aruba_telemetry.Reported.firmware:type_name -> aruba_telemetry.Firmware
	10, // 18: aruba_telemetry.Reported.bevent:type_name -> aruba_telemetry.BeaconEvent
	9,  // 19: aruba_telemetry.Reported.rssi:type_name -> aruba_telemetry.Rssi
	11, // 20: aruba_telemetry.Reported.cell:type_name -> aruba_telemetry.Cell
	16, // 21: aruba_telemetry.Reported.beacons:type_name -> aruba_telemetry.Beacons
	21, // 22: aruba_telemetry.Reported.sensors:type_name -> aruba_telemetry.Sensors
	22, // 23: aruba_telemetry.Reported.stats:type_name -> aruba_telemetry.Stats
	23, // 24: aruba_telemetry.Reported.inputs:type_name -> aruba_telemetry.Inputs
	24, // 25: aruba_telemetry.Reported.vendorData:type_name -> aruba_telemetry.VendorData
	25, // 26: aruba_telemetry.Reported.companyIdentifier:type_name -> aruba_telemetry.BTCompanyID
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_aruba_iot_nb_telemetry_proto_init() }
func file_aruba_iot_nb_telemetry_proto_init() {
	if File_aruba_iot_nb_telemetry_proto != nil {
		return
	}
	file_aruba_iot_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aruba_iot_nb_telemetry_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Rssi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BeaconEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Ibeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*EddyUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*EddyURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Eddystone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Beacons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Accelerometer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RockerSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Occupancy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Inputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*VendorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*BTCompanyID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruba_iot_nb_telemetry_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Reported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruba_iot_nb_telemetry_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aruba_iot_nb_telemetry_proto_goTypes,
		DependencyIndexes: file_aruba_iot_nb_telemetry_proto_depIdxs,
		EnumInfos:         file_aruba_iot_nb_telemetry_proto_enumTypes,
		MessageInfos:      file_aruba_iot_nb_telemetry_proto_msgTypes,
	}.Build()
	File_aruba_iot_nb_telemetry_proto = out.File
	file_aruba_iot_nb_telemetry_proto_rawDesc = nil
	file_aruba_iot_nb_telemetry_proto_goTypes = nil
	file_aruba_iot_nb_telemetry_proto_depIdxs = nil
}
